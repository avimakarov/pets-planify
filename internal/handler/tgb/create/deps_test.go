// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package handler_tgb_create_test is a generated GoMock package.
package handler_tgb_create_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	telego "github.com/mymmrac/telego"
)

// MockServiceBot is a mock of ServiceBot interface.
type MockServiceBot struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBotMockRecorder
}

// MockServiceBotMockRecorder is the mock recorder for MockServiceBot.
type MockServiceBotMockRecorder struct {
	mock *MockServiceBot
}

// NewMockServiceBot creates a new mock instance.
func NewMockServiceBot(ctrl *gomock.Controller) *MockServiceBot {
	mock := &MockServiceBot{ctrl: ctrl}
	mock.recorder = &MockServiceBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBot) EXPECT() *MockServiceBotMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockServiceBot) SendMessage(ctx context.Context, params *telego.SendMessageParams) (*telego.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, params)
	ret0, _ := ret[0].(*telego.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceBotMockRecorder) SendMessage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockServiceBot)(nil).SendMessage), ctx, params)
}

// MockServiceTasks is a mock of ServiceTasks interface.
type MockServiceTasks struct {
	ctrl     *gomock.Controller
	recorder *MockServiceTasksMockRecorder
}

// MockServiceTasksMockRecorder is the mock recorder for MockServiceTasks.
type MockServiceTasksMockRecorder struct {
	mock *MockServiceTasks
}

// NewMockServiceTasks creates a new mock instance.
func NewMockServiceTasks(ctrl *gomock.Controller) *MockServiceTasks {
	mock := &MockServiceTasks{ctrl: ctrl}
	mock.recorder = &MockServiceTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceTasks) EXPECT() *MockServiceTasksMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceTasks) Create(ctx context.Context, userID int64) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceTasksMockRecorder) Create(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceTasks)(nil).Create), ctx, userID)
}
