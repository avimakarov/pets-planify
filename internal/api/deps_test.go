// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package api_test is a generated GoMock package.
package api_test

import (
	context "context"
	server_gen "pets-planify/internal/generated/openapi/server"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandlerInfo is a mock of HandlerInfo interface.
type MockHandlerInfo struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerInfoMockRecorder
}

// MockHandlerInfoMockRecorder is the mock recorder for MockHandlerInfo.
type MockHandlerInfoMockRecorder struct {
	mock *MockHandlerInfo
}

// NewMockHandlerInfo creates a new mock instance.
func NewMockHandlerInfo(ctrl *gomock.Controller) *MockHandlerInfo {
	mock := &MockHandlerInfo{ctrl: ctrl}
	mock.recorder = &MockHandlerInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerInfo) EXPECT() *MockHandlerInfoMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockHandlerInfo) Info(ctx context.Context, out *server_gen.InfoOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockHandlerInfoMockRecorder) Info(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockHandlerInfo)(nil).Info), ctx, out)
}

// MockHandlerGetTaskByID is a mock of HandlerGetTaskByID interface.
type MockHandlerGetTaskByID struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerGetTaskByIDMockRecorder
}

// MockHandlerGetTaskByIDMockRecorder is the mock recorder for MockHandlerGetTaskByID.
type MockHandlerGetTaskByIDMockRecorder struct {
	mock *MockHandlerGetTaskByID
}

// NewMockHandlerGetTaskByID creates a new mock instance.
func NewMockHandlerGetTaskByID(ctrl *gomock.Controller) *MockHandlerGetTaskByID {
	mock := &MockHandlerGetTaskByID{ctrl: ctrl}
	mock.recorder = &MockHandlerGetTaskByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerGetTaskByID) EXPECT() *MockHandlerGetTaskByIDMockRecorder {
	return m.recorder
}

// GetTaskByID mocks base method.
func (m *MockHandlerGetTaskByID) GetTaskByID(ctx context.Context, in *server_gen.GetTaskByIdIn, out *server_gen.GetTaskByIdOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", ctx, in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockHandlerGetTaskByIDMockRecorder) GetTaskByID(ctx, in, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockHandlerGetTaskByID)(nil).GetTaskByID), ctx, in, out)
}
